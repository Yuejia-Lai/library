import{_ as e}from"./plugin-vue_export-helper.21dcd24c.js";import{o,c,a as n,b as s,d as p,e as t,r as l}from"./app.25e2c619.js";const i={},u=n("div",{class:"custom-container info"},[n("p",{class:"custom-container-title"},"\u76F8\u5173\u4FE1\u606F"),n("p",null,"\u5251\u6307offer\uFF08\u7B2C\u4E8C\u7248\uFF09\u7B2C\u4E00\u90E8\u5206\u9898\u89E3 --Java\u5B9E\u73B0")],-1),r={id:"\u5251\u6307-offer-03-\u6570\u7EC4\u4E2D\u91CD\u590D\u7684\u6570\u5B57",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#\u5251\u6307-offer-03-\u6570\u7EC4\u4E2D\u91CD\u590D\u7684\u6570\u5B57","aria-hidden":"true"},"#",-1),d={href:"https://leetcode.cn/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/",target:"_blank",rel:"noopener noreferrer"},v=t(`<p><strong>\u9898\u76EE\u63CF\u8FF0\uFF1A</strong></p><p>\u627E\u51FA\u6570\u7EC4\u4E2D\u91CD\u590D\u7684\u6570\u5B57</p><p>\u5728\u4E00\u4E2A\u957F\u5EA6\u4E3A n \u7684\u6570\u7EC4 nums \u91CC\u7684\u6240\u6709\u6570\u5B57\u90FD\u5728 0\uFF5En-1 \u7684\u8303\u56F4\u5185\u3002\u6570\u7EC4\u4E2D\u67D0\u4E9B\u6570\u5B57\u662F\u91CD\u590D\u7684\uFF0C\u4F46\u4E0D\u77E5\u9053\u6709\u51E0\u4E2A\u6570\u5B57\u91CD\u590D\u4E86\uFF0C\u4E5F\u4E0D\u77E5\u9053\u6BCF\u4E2A\u6570\u5B57\u91CD\u590D\u4E86\u51E0\u6B21\u3002\u8BF7\u627E\u51FA\u6570\u7EC4\u4E2D\u4EFB\u610F\u4E00\u4E2A\u91CD\u590D\u7684\u6570\u5B57</p><p><strong>\u793A\u4F8B 1\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1A
[2, 3, 1, 0, 2, 5, 3]
\u8F93\u51FA\uFF1A2 \u6216 3 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>\u6392\u5E8F\u540E\u904D\u5386\u6216\u8005\u54C8\u5E0C\u8868</strong></p><p><strong>\u9898\u89E3\uFF1A</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findRepeatNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> len<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u5148\u6392\u5E8F\uFF0C\u540E\u904D\u5386</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findRepeatNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> set<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//\u54C8\u5E0C\u8868</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,11),m={id:"\u5251\u6307-offer-04-\u4E8C\u7EF4\u6570\u7EC4\u4E2D\u7684\u67E5\u627E",tabindex:"-1"},b=n("a",{class:"header-anchor",href:"#\u5251\u6307-offer-04-\u4E8C\u7EF4\u6570\u7EC4\u4E2D\u7684\u67E5\u627E","aria-hidden":"true"},"#",-1),g={href:"https://leetcode.cn/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/",target:"_blank",rel:"noopener noreferrer"},h=t(`<p><strong>\u9898\u76EE\u63CF\u8FF0\uFF1A</strong></p><p>\u5728\u4E00\u4E2A n * m \u7684\u4E8C\u7EF4\u6570\u7EC4\u4E2D\uFF0C\u6BCF\u4E00\u884C\u90FD\u6309\u7167\u4ECE\u5DE6\u5230\u53F3\u9012\u589E\u7684\u987A\u5E8F\u6392\u5E8F\uFF0C\u6BCF\u4E00\u5217\u90FD\u6309\u7167\u4ECE\u4E0A\u5230\u4E0B\u9012\u589E\u7684\u987A\u5E8F\u6392\u5E8F\u3002\u8BF7\u5B8C\u6210\u4E00\u4E2A\u9AD8\u6548\u7684\u51FD\u6570\uFF0C\u8F93\u5165\u8FD9\u6837\u7684\u4E00\u4E2A\u4E8C\u7EF4\u6570\u7EC4\u548C\u4E00\u4E2A\u6574\u6570\uFF0C\u5224\u65AD\u6570\u7EC4\u4E2D\u662F\u5426\u542B\u6709\u8BE5\u6574\u6570</p><p><strong>\u793A\u4F8B:</strong></p><p>\u73B0\u6709\u77E9\u9635 matrix \u5982\u4E0B\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u7ED9\u5B9A target = <code>5</code>\uFF0C\u8FD4\u56DE <code>true</code>\u3002</p><p>\u7ED9\u5B9A target = <code>20</code>\uFF0C\u8FD4\u56DE <code>false</code></p><hr><p>\u4ECE\u53F3\u4E0A\u5F00\u59CB\u5BFB\u627E\uFF0C\u76EE\u6807\u6570\u5927\u4E8E\u5F53\u524D\u6570\uFF0C\u6307\u9488\u5411\u4E0B\u79FB\u4E00\u4F4D\uFF0C\u5C0F\u4E8E\u5F53\u524D\u6570\uFF0C\u6307\u9488\u5411\u5DE6\u79FB\u4E00\u4F4D</p><p><strong>\u9898\u89E3\uFF1A</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">findNumberIn2DArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> m<span class="token operator">=</span>matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n<span class="token operator">=</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> j<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>m<span class="token operator">&amp;&amp;</span>j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;</span>target<span class="token punctuation">)</span> j<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,12),w={id:"\u5251\u6307-offer-05-\u66FF\u6362\u7A7A\u683C",tabindex:"-1"},f=n("a",{class:"header-anchor",href:"#\u5251\u6307-offer-05-\u66FF\u6362\u7A7A\u683C","aria-hidden":"true"},"#",-1),y={href:"https://leetcode.cn/problems/ti-huan-kong-ge-lcof/",target:"_blank",rel:"noopener noreferrer"},x=t(`<p><strong>\u9898\u76EE\u63CF\u8FF0\uFF1A</strong></p><p>\u8BF7\u5B9E\u73B0\u4E00\u4E2A\u51FD\u6570\uFF0C\u628A\u5B57\u7B26\u4E32 <code>s</code> \u4E2D\u7684\u6BCF\u4E2A\u7A7A\u683C\u66FF\u6362\u6210&quot;%20&quot;</p><p><strong>\u793A\u4F8B 1\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1As = &quot;We are happy.&quot;
\u8F93\u51FA\uFF1A&quot;We%20are%20happy.&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>\u904D\u5386\u66FF\u6362\u5373\u53EF</p><p><strong>\u9898\u89E3\uFF1A</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">replaceSpace</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> len<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list1<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>list1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39; &#39;</span><span class="token punctuation">)</span> num<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> s<span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>len<span class="token operator">+</span>num<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> left<span class="token operator">=</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> right<span class="token operator">=</span>len<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token operator">&amp;&amp;</span>left<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>list1<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                list<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">=</span>list1<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
                right<span class="token operator">--</span><span class="token punctuation">;</span>
                left<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span><span class="token punctuation">{</span>
                list<span class="token punctuation">[</span>right<span class="token operator">--</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span>
                list<span class="token punctuation">[</span>right<span class="token operator">--</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">&#39;2&#39;</span><span class="token punctuation">;</span>
                list<span class="token punctuation">[</span>right<span class="token operator">--</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">&#39;%&#39;</span><span class="token punctuation">;</span>
                left<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            list<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">=</span>list1<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
            left<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">String</span> result<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>num<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
            result<span class="token operator">+=</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,9),_={id:"\u5251\u6307-offer-06-\u4ECE\u5C3E\u5230\u5934\u6253\u5370\u94FE\u8868",tabindex:"-1"},q=n("a",{class:"header-anchor",href:"#\u5251\u6307-offer-06-\u4ECE\u5C3E\u5230\u5934\u6253\u5370\u94FE\u8868","aria-hidden":"true"},"#",-1),j={href:"https://leetcode.cn/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/",target:"_blank",rel:"noopener noreferrer"},N=t(`<p><strong>\u9898\u76EE\u63CF\u8FF0\uFF1A</strong></p><p>\u8F93\u5165\u4E00\u4E2A\u94FE\u8868\u7684\u5934\u8282\u70B9\uFF0C\u4ECE\u5C3E\u5230\u5934\u53CD\u8FC7\u6765\u8FD4\u56DE\u6BCF\u4E2A\u8282\u70B9\u7684\u503C\uFF08\u7528\u6570\u7EC4\u8FD4\u56DE\uFF09\u3002</p><p><strong>\u793A\u4F8B 1\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1Ahead = [1,3,2]
\u8F93\u51FA\uFF1A[2,3,1]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>\u6B63\u5E8F\u904D\u5386\u5B58\u5165\u6570\u7EC4\u6216\u8005\u6808\u4E2D\uFF0C\u518D\u53D6\u51FA\u5373\u53EF</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">reversePrint</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ListNode</span> p<span class="token operator">=</span>head<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
            p<span class="token operator">=</span>p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> len<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u9012\u5F52\u51FD\u6570\u904D\u5386\u4E5F\u53EF</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">reversePrint</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">recur</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>tmp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> res<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">recur</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token function">recur</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
        tmp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,10),S={id:"\u5251\u6307-offer-07-\u91CD\u5EFA\u4E8C\u53C9\u6811",tabindex:"-1"},z=n("a",{class:"header-anchor",href:"#\u5251\u6307-offer-07-\u91CD\u5EFA\u4E8C\u53C9\u6811","aria-hidden":"true"},"#",-1),T={href:"https://leetcode.cn/problems/zhong-jian-er-cha-shu-lcof/",target:"_blank",rel:"noopener noreferrer"},O=t(`<p><strong>\u9898\u76EE\u63CF\u8FF0\uFF1A</strong></p><p>\u8F93\u5165\u67D0\u4E8C\u53C9\u6811\u7684\u524D\u5E8F\u904D\u5386\u548C\u4E2D\u5E8F\u904D\u5386\u7684\u7ED3\u679C\uFF0C\u8BF7\u6784\u5EFA\u8BE5\u4E8C\u53C9\u6811\u5E76\u8FD4\u56DE\u5176\u6839\u8282\u70B9\u3002</p><p>\u5047\u8BBE\u8F93\u5165\u7684\u524D\u5E8F\u904D\u5386\u548C\u4E2D\u5E8F\u904D\u5386\u7684\u7ED3\u679C\u4E2D\u90FD\u4E0D\u542B\u91CD\u590D\u7684\u6570\u5B57\u3002</p><p><strong>\u793A\u4F8B 1:</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/tree.jpg" alt="img" loading="lazy"></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
Output: [3,9,20,null,null,15,7]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u793A\u4F8B 2:</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: preorder = [-1], inorder = [-1]
Output: [-1]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>\u9898\u89E3\uFF1A</strong></p><p>\u9012\u5F52\u52A0\u6307\u9488</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preorder<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inorder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>preorder<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">TreeNode</span> root<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">tree</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>preorder<span class="token punctuation">,</span>inorder<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> preorder<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>inorder<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">tree</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> node<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pre<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> in<span class="token punctuation">,</span><span class="token keyword">int</span> pleft<span class="token punctuation">,</span><span class="token keyword">int</span> pright<span class="token punctuation">,</span><span class="token keyword">int</span> ileft<span class="token punctuation">,</span><span class="token keyword">int</span> iright<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>pleft<span class="token operator">&gt;</span>pright<span class="token operator">||</span>ileft<span class="token operator">&gt;</span>iright<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> index<span class="token operator">=</span>pleft<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>ileft<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>iright<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>pre<span class="token punctuation">[</span>pleft<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                index<span class="token operator">=</span>i<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        node<span class="token punctuation">.</span>val<span class="token operator">=</span>pre<span class="token punctuation">[</span>pleft<span class="token punctuation">]</span><span class="token punctuation">;</span>
        node<span class="token punctuation">.</span>left<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>pre<span class="token punctuation">[</span>pleft<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        node<span class="token punctuation">.</span>right<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>pre<span class="token punctuation">[</span>pleft<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        node<span class="token punctuation">.</span>left<span class="token operator">=</span><span class="token function">tree</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>pre<span class="token punctuation">,</span>in<span class="token punctuation">,</span>pleft<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>index<span class="token operator">-</span>ileft<span class="token operator">+</span>pleft<span class="token punctuation">,</span>ileft<span class="token punctuation">,</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        node<span class="token punctuation">.</span>right<span class="token operator">=</span><span class="token function">tree</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span>pre<span class="token punctuation">,</span>in<span class="token punctuation">,</span>index<span class="token operator">-</span>ileft<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>pleft<span class="token punctuation">,</span>pright<span class="token punctuation">,</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>iright<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,13),A={id:"\u5251\u6307-offer-09-\u7528\u4E24\u4E2A\u6808\u5B9E\u73B0\u961F\u5217",tabindex:"-1"},E=n("a",{class:"header-anchor",href:"#\u5251\u6307-offer-09-\u7528\u4E24\u4E2A\u6808\u5B9E\u73B0\u961F\u5217","aria-hidden":"true"},"#",-1),I={href:"https://leetcode.cn/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/",target:"_blank",rel:"noopener noreferrer"},L=t(`<p><strong>\u9898\u76EE\u63CF\u8FF0\uFF1A</strong></p><p>\u7528\u4E24\u4E2A\u6808\u5B9E\u73B0\u4E00\u4E2A\u961F\u5217\u3002\u961F\u5217\u7684\u58F0\u660E\u5982\u4E0B\uFF0C\u8BF7\u5B9E\u73B0\u5B83\u7684\u4E24\u4E2A\u51FD\u6570 <code>appendTail</code> \u548C <code>deleteHead</code> \uFF0C\u5206\u522B\u5B8C\u6210\u5728\u961F\u5217\u5C3E\u90E8\u63D2\u5165\u6574\u6570\u548C\u5728\u961F\u5217\u5934\u90E8\u5220\u9664\u6574\u6570\u7684\u529F\u80FD\u3002(\u82E5\u961F\u5217\u4E2D\u6CA1\u6709\u5143\u7D20\uFF0C<code>deleteHead</code> \u64CD\u4F5C\u8FD4\u56DE -1 )</p><p><strong>\u793A\u4F8B 1\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1A
[&quot;CQueue&quot;,&quot;appendTail&quot;,&quot;deleteHead&quot;,&quot;deleteHead&quot;,&quot;deleteHead&quot;]
[[],[3],[],[],[]]
\u8F93\u51FA\uFF1A[null,null,3,-1,-1]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u793A\u4F8B 2\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1A
[&quot;CQueue&quot;,&quot;deleteHead&quot;,&quot;appendTail&quot;,&quot;appendTail&quot;,&quot;deleteHead&quot;,&quot;deleteHead&quot;]
[[],[],[5],[2],[],[]]
\u8F93\u51FA\uFF1A[null,-1,null,null,5,2]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>\u9898\u89E3\uFF1A</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preorder<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inorder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>preorder<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">TreeNode</span> root<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">tree</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>preorder<span class="token punctuation">,</span>inorder<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> preorder<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>inorder<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">tree</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> node<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pre<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> in<span class="token punctuation">,</span><span class="token keyword">int</span> pleft<span class="token punctuation">,</span><span class="token keyword">int</span> pright<span class="token punctuation">,</span><span class="token keyword">int</span> ileft<span class="token punctuation">,</span><span class="token keyword">int</span> iright<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>pleft<span class="token operator">&gt;</span>pright<span class="token operator">||</span>ileft<span class="token operator">&gt;</span>iright<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> index<span class="token operator">=</span>pleft<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>ileft<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>iright<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>pre<span class="token punctuation">[</span>pleft<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                index<span class="token operator">=</span>i<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        node<span class="token punctuation">.</span>val<span class="token operator">=</span>pre<span class="token punctuation">[</span>pleft<span class="token punctuation">]</span><span class="token punctuation">;</span>
        node<span class="token punctuation">.</span>left<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>pre<span class="token punctuation">[</span>pleft<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        node<span class="token punctuation">.</span>right<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>pre<span class="token punctuation">[</span>pleft<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        node<span class="token punctuation">.</span>left<span class="token operator">=</span><span class="token function">tree</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>pre<span class="token punctuation">,</span>in<span class="token punctuation">,</span>pleft<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>index<span class="token operator">-</span>ileft<span class="token operator">+</span>pleft<span class="token punctuation">,</span>ileft<span class="token punctuation">,</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        node<span class="token punctuation">.</span>right<span class="token operator">=</span><span class="token function">tree</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span>pre<span class="token punctuation">,</span>in<span class="token punctuation">,</span>index<span class="token operator">-</span>ileft<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>pleft<span class="token punctuation">,</span>pright<span class="token punctuation">,</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>iright<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,10),C={id:"\u5251\u6307-offer-10-i-\u6590\u6CE2\u90A3\u5951\u6570\u5217",tabindex:"-1"},H=n("a",{class:"header-anchor",href:"#\u5251\u6307-offer-10-i-\u6590\u6CE2\u90A3\u5951\u6570\u5217","aria-hidden":"true"},"#",-1),B={href:"https://leetcode.cn/problems/fei-bo-na-qi-shu-lie-lcof/",target:"_blank",rel:"noopener noreferrer"},F=t(`<p><strong>\u9898\u76EE\u63CF\u8FF0\uFF1A</strong></p><p>\u5199\u4E00\u4E2A\u51FD\u6570\uFF0C\u8F93\u5165 <code>n</code> \uFF0C\u6C42\u6590\u6CE2\u90A3\u5951\uFF08Fibonacci\uFF09\u6570\u5217\u7684\u7B2C <code>n</code> \u9879\uFF08\u5373 <code>F(N)</code>\uFF09\u3002\u6590\u6CE2\u90A3\u5951\u6570\u5217\u7684\u5B9A\u4E49\u5982\u4E0B\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>F(0) = 0,   F(1) = 1
F(N) = F(N - 1) + F(N - 2), \u5176\u4E2D N &gt; 1.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6590\u6CE2\u90A3\u5951\u6570\u5217\u7531 0 \u548C 1 \u5F00\u59CB\uFF0C\u4E4B\u540E\u7684\u6590\u6CE2\u90A3\u5951\u6570\u5C31\u662F\u7531\u4E4B\u524D\u7684\u4E24\u6570\u76F8\u52A0\u800C\u5F97\u51FA\u3002</p><p>\u7B54\u6848\u9700\u8981\u53D6\u6A21 1e9+7\uFF081000000007\uFF09\uFF0C\u5982\u8BA1\u7B97\u521D\u59CB\u7ED3\u679C\u4E3A\uFF1A1000000008\uFF0C\u8BF7\u8FD4\u56DE 1\u3002</p><p><strong>\u793A\u4F8B 1\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1An = 2
\u8F93\u51FA\uFF1A1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u793A\u4F8B 2\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1An = 5
\u8F93\u51FA\uFF1A5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>\u9012\u5F52</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>n<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> dp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">1000000007</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">1000000007</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,13),D={id:"\u5251\u6307-offer-10-ii-\u9752\u86D9\u8DF3\u53F0\u9636\u95EE\u9898",tabindex:"-1"},R=n("a",{class:"header-anchor",href:"#\u5251\u6307-offer-10-ii-\u9752\u86D9\u8DF3\u53F0\u9636\u95EE\u9898","aria-hidden":"true"},"#",-1),V={href:"https://leetcode.cn/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/",target:"_blank",rel:"noopener noreferrer"},W=t(`<p><strong>\u9898\u76EE\u63CF\u8FF0\uFF1A</strong></p><p>\u4E00\u53EA\u9752\u86D9\u4E00\u6B21\u53EF\u4EE5\u8DF3\u4E0A1\u7EA7\u53F0\u9636\uFF0C\u4E5F\u53EF\u4EE5\u8DF3\u4E0A2\u7EA7\u53F0\u9636\u3002\u6C42\u8BE5\u9752\u86D9\u8DF3\u4E0A\u4E00\u4E2A <code>n</code> \u7EA7\u7684\u53F0\u9636\u603B\u5171\u6709\u591A\u5C11\u79CD\u8DF3\u6CD5\u3002</p><p>\u7B54\u6848\u9700\u8981\u53D6\u6A21 1e9+7\uFF081000000007\uFF09\uFF0C\u5982\u8BA1\u7B97\u521D\u59CB\u7ED3\u679C\u4E3A\uFF1A1000000008\uFF0C\u8BF7\u8FD4\u56DE 1\u3002</p><p><strong>\u793A\u4F8B 1\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1An = 2
\u8F93\u51FA\uFF1A2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u793A\u4F8B 2\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1An = 7
\u8F93\u51FA\uFF1A21
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u793A\u4F8B 3\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1An = 0
\u8F93\u51FA\uFF1A1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>\u9898\u89E3\uFF1A</strong></p><p>\u9012\u5F52\u5373\u53EF</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numWays</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">1000000007</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,14),J={id:"\u5251\u6307-offer-11-\u65CB\u8F6C\u6570\u7EC4\u7684\u6700\u5C0F\u6570\u5B57",tabindex:"-1"},M=n("a",{class:"header-anchor",href:"#\u5251\u6307-offer-11-\u65CB\u8F6C\u6570\u7EC4\u7684\u6700\u5C0F\u6570\u5B57","aria-hidden":"true"},"#",-1),P={href:"https://leetcode.cn/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/",target:"_blank",rel:"noopener noreferrer"},Q=t(`<p><strong>\u9898\u76EE\u63CF\u8FF0\uFF1A</strong></p><p>\u628A\u4E00\u4E2A\u6570\u7EC4\u6700\u5F00\u59CB\u7684\u82E5\u5E72\u4E2A\u5143\u7D20\u642C\u5230\u6570\u7EC4\u7684\u672B\u5C3E\uFF0C\u6211\u4EEC\u79F0\u4E4B\u4E3A\u6570\u7EC4\u7684\u65CB\u8F6C\u3002</p><p>\u7ED9\u4F60\u4E00\u4E2A\u53EF\u80FD\u5B58\u5728 <strong>\u91CD\u590D</strong> \u5143\u7D20\u503C\u7684\u6570\u7EC4 <code>numbers</code> \uFF0C\u5B83\u539F\u6765\u662F\u4E00\u4E2A\u5347\u5E8F\u6392\u5217\u7684\u6570\u7EC4\uFF0C\u5E76\u6309\u4E0A\u8FF0\u60C5\u5F62\u8FDB\u884C\u4E86\u4E00\u6B21\u65CB\u8F6C\u3002\u8BF7\u8FD4\u56DE\u65CB\u8F6C\u6570\u7EC4\u7684<strong>\u6700\u5C0F\u5143\u7D20</strong>\u3002\u4F8B\u5982\uFF0C\u6570\u7EC4 <code>[3,4,5,1,2]</code> \u4E3A <code>[1,2,3,4,5]</code> \u7684\u4E00\u6B21\u65CB\u8F6C\uFF0C\u8BE5\u6570\u7EC4\u7684\u6700\u5C0F\u503C\u4E3A 1\u3002</p><p>\u6CE8\u610F\uFF0C\u6570\u7EC4 <code>[a[0], a[1], a[2], ..., a[n-1]]</code> \u65CB\u8F6C\u4E00\u6B21 \u7684\u7ED3\u679C\u4E3A\u6570\u7EC4 <code>[a[n-1], a[0], a[1], a[2], ..., a[n-2]]</code> \u3002</p><p><strong>\u793A\u4F8B 1\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1Anumbers = [3,4,5,1,2]
\u8F93\u51FA\uFF1A1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u793A\u4F8B 2\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1Anumbers = [2,2,2,0,1]
\u8F93\u51FA\uFF1A0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>\u4E8C\u5206\u67E5\u627E</p><p><strong>\u9898\u89E3\uFF1A</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> high <span class="token operator">=</span> numbers<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> pivot <span class="token operator">=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>pivot<span class="token punctuation">]</span> <span class="token operator">&lt;</span> numbers<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                high <span class="token operator">=</span> pivot<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>pivot<span class="token punctuation">]</span> <span class="token operator">&gt;</span> numbers<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                low <span class="token operator">=</span> pivot <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                high <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> numbers<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,13),G={id:"\u5251\u6307-offer-12-\u77E9\u9635\u4E2D\u7684\u8DEF\u5F84",tabindex:"-1"},K=n("a",{class:"header-anchor",href:"#\u5251\u6307-offer-12-\u77E9\u9635\u4E2D\u7684\u8DEF\u5F84","aria-hidden":"true"},"#",-1),U={href:"https://leetcode.cn/problems/ju-zhen-zhong-de-lu-jing-lcof/",target:"_blank",rel:"noopener noreferrer"},X=t(`<p><strong>\u9898\u76EE\u63CF\u8FF0\uFF1A</strong></p><p>\u7ED9\u5B9A\u4E00\u4E2A <code>m x n</code> \u4E8C\u7EF4\u5B57\u7B26\u7F51\u683C <code>board</code> \u548C\u4E00\u4E2A\u5B57\u7B26\u4E32\u5355\u8BCD <code>word</code> \u3002\u5982\u679C <code>word</code> \u5B58\u5728\u4E8E\u7F51\u683C\u4E2D\uFF0C\u8FD4\u56DE <code>true</code> \uFF1B\u5426\u5219\uFF0C\u8FD4\u56DE <code>false</code> \u3002</p><p>\u5355\u8BCD\u5FC5\u987B\u6309\u7167\u5B57\u6BCD\u987A\u5E8F\uFF0C\u901A\u8FC7\u76F8\u90BB\u7684\u5355\u5143\u683C\u5185\u7684\u5B57\u6BCD\u6784\u6210\uFF0C\u5176\u4E2D\u201C\u76F8\u90BB\u201D\u5355\u5143\u683C\u662F\u90A3\u4E9B\u6C34\u5E73\u76F8\u90BB\u6216\u5782\u76F4\u76F8\u90BB\u7684\u5355\u5143\u683C\u3002\u540C\u4E00\u4E2A\u5355\u5143\u683C\u5185\u7684\u5B57\u6BCD\u4E0D\u5141\u8BB8\u88AB\u91CD\u590D\u4F7F\u7528\u3002</p><p>\u4F8B\u5982\uFF0C\u5728\u4E0B\u9762\u7684 3\xD74 \u7684\u77E9\u9635\u4E2D\u5305\u542B\u5355\u8BCD &quot;ABCCED&quot;\uFF08\u5355\u8BCD\u4E2D\u7684\u5B57\u6BCD\u5DF2\u6807\u51FA\uFF09\u3002</p><p><img src="https://assets.leetcode.com/uploads/2020/11/04/word2.jpg" alt="img" loading="lazy"></p><p><strong>\u793A\u4F8B 1\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1Aboard = [[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],[&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],[&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]], word = &quot;ABCCED&quot;
\u8F93\u51FA\uFF1Atrue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u793A\u4F8B 2\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1Aboard = [[&quot;a&quot;,&quot;b&quot;],[&quot;c&quot;,&quot;d&quot;]], word = &quot;abcd&quot;
\u8F93\u51FA\uFF1Afalse
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>\u56DE\u6EAF\u6CD5</strong></p><p><strong>\u9898\u89E3\uFF1A</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">exist</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">,</span> <span class="token class-name">String</span> word<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> m<span class="token operator">=</span>board<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">int</span> n<span class="token operator">=</span>board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>  path<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> flag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token function">search</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span>path<span class="token punctuation">,</span>flag<span class="token punctuation">,</span>word<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> flag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>  path<span class="token punctuation">,</span><span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> flag<span class="token punctuation">,</span><span class="token class-name">String</span> word<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">==</span>word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            flag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>m<span class="token operator">&amp;&amp;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;</span>n<span class="token operator">&amp;&amp;</span>j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token operator">==</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token function">search</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> path<span class="token punctuation">,</span> flag<span class="token punctuation">,</span> word<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">search</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> path<span class="token punctuation">,</span> flag<span class="token punctuation">,</span> word<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">search</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> path<span class="token punctuation">,</span> flag<span class="token punctuation">,</span> word<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">search</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> path<span class="token punctuation">,</span> flag<span class="token punctuation">,</span> word<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
                path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,14),Y={id:"\u5251\u6307-offer-14-i-\u526A\u7EF3\u5B50",tabindex:"-1"},Z=n("a",{class:"header-anchor",href:"#\u5251\u6307-offer-14-i-\u526A\u7EF3\u5B50","aria-hidden":"true"},"#",-1),$={href:"https://leetcode.cn/problems/jian-sheng-zi-lcof/",target:"_blank",rel:"noopener noreferrer"},nn=t(`<p><strong>\u9898\u76EE\u63CF\u8FF0\uFF1A</strong></p><p>\u7ED9\u4F60\u4E00\u6839\u957F\u5EA6\u4E3A <code>n</code> \u7684\u7EF3\u5B50\uFF0C\u8BF7\u628A\u7EF3\u5B50\u526A\u6210\u6574\u6570\u957F\u5EA6\u7684 <code>m</code> \u6BB5\uFF08m\u3001n\u90FD\u662F\u6574\u6570\uFF0Cn&gt;1\u5E76\u4E14m&gt;1\uFF09\uFF0C\u6BCF\u6BB5\u7EF3\u5B50\u7684\u957F\u5EA6\u8BB0\u4E3A <code>k[0],k[1]...k[m-1]</code> \u3002\u8BF7\u95EE <code>k[0]*k[1]*...*k[m-1]</code> \u53EF\u80FD\u7684\u6700\u5927\u4E58\u79EF\u662F\u591A\u5C11\uFF1F\u4F8B\u5982\uFF0C\u5F53\u7EF3\u5B50\u7684\u957F\u5EA6\u662F8\u65F6\uFF0C\u6211\u4EEC\u628A\u5B83\u526A\u6210\u957F\u5EA6\u5206\u522B\u4E3A2\u30013\u30013\u7684\u4E09\u6BB5\uFF0C\u6B64\u65F6\u5F97\u5230\u7684\u6700\u5927\u4E58\u79EF\u662F18\u3002</p><p><strong>\u793A\u4F8B 1\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165: 2
\u8F93\u51FA: 1
\u89E3\u91CA: 2 = 1 + 1, 1 \xD7 1 = 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u793A\u4F8B 2:</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165: 10
\u8F93\u51FA: 36
\u89E3\u91CA: 10 = 3 + 3 + 4, 3 \xD7 3 \xD7 4 = 36
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>\u52A8\u6001\u89C4\u5212</strong></p><p><strong>\u9898\u89E3\uFF1A</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">cuttingRope</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// \u521D\u59CB\u5316</span>
        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// \u6307\u957F\u5EA6\u4E3A1\u7684\u5355\u72EC\u4E58\u79EF\u4E3A1</span>
        <span class="token comment">// \u904D\u5386[2,n]\u7684\u6BCF\u4E2A\u72B6\u6001</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u6C42\u51FA\u4E24\u79CD\u8F6C\u79FB\u60C5\u51B5(\u4E58\u79EF\u4E2A\u6570\u4E3A2\u548C2\u4EE5\u4E0A)\u7684\u6700\u5927\u503C</span>
                <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> j <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,11),sn={id:"\u5251\u6307-offer-14-ii-\u526A\u7EF3\u5B50-ii",tabindex:"-1"},an=n("a",{class:"header-anchor",href:"#\u5251\u6307-offer-14-ii-\u526A\u7EF3\u5B50-ii","aria-hidden":"true"},"#",-1),pn={href:"https://leetcode.cn/problems/jian-sheng-zi-ii-lcof/",target:"_blank",rel:"noopener noreferrer"},tn=t(`<p><strong>\u9898\u76EE\u63CF\u8FF0\uFF1A</strong></p><p>\u7ED9\u4F60\u4E00\u6839\u957F\u5EA6\u4E3A <code>n</code> \u7684\u7EF3\u5B50\uFF0C\u8BF7\u628A\u7EF3\u5B50\u526A\u6210\u6574\u6570\u957F\u5EA6\u7684 <code>m</code> \u6BB5\uFF08m\u3001n\u90FD\u662F\u6574\u6570\uFF0Cn&gt;1\u5E76\u4E14m&gt;1\uFF09\uFF0C\u6BCF\u6BB5\u7EF3\u5B50\u7684\u957F\u5EA6\u8BB0\u4E3A <code>k[0],k[1]...k[m - 1]</code> \u3002\u8BF7\u95EE <code>k[0]*k[1]*...*k[m - 1]</code> \u53EF\u80FD\u7684\u6700\u5927\u4E58\u79EF\u662F\u591A\u5C11\uFF1F\u4F8B\u5982\uFF0C\u5F53\u7EF3\u5B50\u7684\u957F\u5EA6\u662F8\u65F6\uFF0C\u6211\u4EEC\u628A\u5B83\u526A\u6210\u957F\u5EA6\u5206\u522B\u4E3A2\u30013\u30013\u7684\u4E09\u6BB5\uFF0C\u6B64\u65F6\u5F97\u5230\u7684\u6700\u5927\u4E58\u79EF\u662F18\u3002</p><p>\u7B54\u6848\u9700\u8981\u53D6\u6A21 1e9+7\uFF081000000007\uFF09\uFF0C\u5982\u8BA1\u7B97\u521D\u59CB\u7ED3\u679C\u4E3A\uFF1A1000000008\uFF0C\u8BF7\u8FD4\u56DE 1\u3002</p><p><strong>\u793A\u4F8B 1\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165: 2
\u8F93\u51FA: 1
\u89E3\u91CA: 2 = 1 + 1, 1 \xD7 1 = 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u793A\u4F8B 2:</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165: 10
\u8F93\u51FA: 36
\u89E3\u91CA: 10 = 3 + 3 + 4, 3 \xD7 3 \xD7 4 = 36
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>\u52A8\u6001\u89C4\u5212</strong></p><p><strong>\u9898\u89E3\uFF1A</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">cuttingRope</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> 
            <span class="token keyword">return</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> b <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> ret <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> lineNums<span class="token operator">=</span>n<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">;</span>           <span class="token comment">//\u7EBF\u6BB5\u88AB\u6211\u4EEC\u5206\u6210\u4EE53\u4E3A\u5927\u5C0F\u7684\u5C0F\u7EBF\u6BB5\u4E2A\u6570</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>lineNums<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//\u4ECE\u7B2C\u4E00\u6BB5\u7EBF\u6BB5\u5F00\u59CB\u9A8C\u7B97\uFF0C3\u7684ret\u6B21\u65B9\u662F\u5426\u8D8A\u754C\u3002\u6CE8\u610F\u662F\u9A8C\u7B97lineNums-1\u6B21\u3002</span>
            ret <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">*</span>ret <span class="token operator">%</span> p<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> 
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ret <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">%</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//\u521A\u597D\u88AB3\u6574\u6570\u7684\uFF0C\u8981\u7B97\u4E0A\u524D\u4E00\u6BB5</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> 
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ret <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">%</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//\u88AB3\u6574\u6570\u4F591\u7684\uFF0C\u8981\u7B97\u4E0A\u524D\u4E00\u6BB5</span>

        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ret <span class="token operator">*</span> <span class="token number">6</span> <span class="token operator">%</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//\u88AB3\u6574\u6570\u4F592\u7684\uFF0C\u8981\u7B97\u4E0A\u524D\u4E00\u6BB5</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),en={id:"\u5251\u6307-offer-15-\u4E8C\u8FDB\u5236\u4E2D1\u7684\u4E2A\u6570",tabindex:"-1"},on=n("a",{class:"header-anchor",href:"#\u5251\u6307-offer-15-\u4E8C\u8FDB\u5236\u4E2D1\u7684\u4E2A\u6570","aria-hidden":"true"},"#",-1),cn={href:"https://leetcode.cn/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/",target:"_blank",rel:"noopener noreferrer"},ln=n("p",null,[n("strong",null,"\u9898\u76EE\u63CF\u8FF0\uFF1A")],-1),un={href:"http://en.wikipedia.org/wiki/Hamming_weight",target:"_blank",rel:"noopener noreferrer"},rn=n("p",null,[n("strong",null,"\u63D0\u793A\uFF1A")],-1),kn=n("li",null,"\u8BF7\u6CE8\u610F\uFF0C\u5728\u67D0\u4E9B\u8BED\u8A00\uFF08\u5982 Java\uFF09\u4E2D\uFF0C\u6CA1\u6709\u65E0\u7B26\u53F7\u6574\u6570\u7C7B\u578B\u3002\u5728\u8FD9\u79CD\u60C5\u51B5\u4E0B\uFF0C\u8F93\u5165\u548C\u8F93\u51FA\u90FD\u5C06\u88AB\u6307\u5B9A\u4E3A\u6709\u7B26\u53F7\u6574\u6570\u7C7B\u578B\uFF0C\u5E76\u4E14\u4E0D\u5E94\u5F71\u54CD\u60A8\u7684\u5B9E\u73B0\uFF0C\u56E0\u4E3A\u65E0\u8BBA\u6574\u6570\u662F\u6709\u7B26\u53F7\u7684\u8FD8\u662F\u65E0\u7B26\u53F7\u7684\uFF0C\u5176\u5185\u90E8\u7684\u4E8C\u8FDB\u5236\u8868\u793A\u5F62\u5F0F\u90FD\u662F\u76F8\u540C\u7684\u3002",-1),dn={href:"https://baike.baidu.com/item/%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A5%E7%A0%81/5295284",target:"_blank",rel:"noopener noreferrer"},vn=n("strong",null,"\u793A\u4F8B 3",-1),mn=n("code",null,"-3",-1),bn=t(`<p><strong>\u793A\u4F8B 1\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1An = 11 (\u63A7\u5236\u53F0\u8F93\u5165 00000000000000000000000000001011)
\u8F93\u51FA\uFF1A3
\u89E3\u91CA\uFF1A\u8F93\u5165\u7684\u4E8C\u8FDB\u5236\u4E32 00000000000000000000000000001011 \u4E2D\uFF0C\u5171\u6709\u4E09\u4F4D\u4E3A &#39;1&#39;\u3002
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u793A\u4F8B 2\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1An = 128 (\u63A7\u5236\u53F0\u8F93\u5165 00000000000000000000000010000000)
\u8F93\u51FA\uFF1A1
\u89E3\u91CA\uFF1A\u8F93\u5165\u7684\u4E8C\u8FDB\u5236\u4E32 00000000000000000000000010000000 \u4E2D\uFF0C\u5171\u6709\u4E00\u4F4D\u4E3A &#39;1&#39;\u3002
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u793A\u4F8B 3\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1An = 4294967293 (\u63A7\u5236\u53F0\u8F93\u5165 11111111111111111111111111111101\uFF0C\u90E8\u5206\u8BED\u8A00\u4E2D n = -3\uFF09
\u8F93\u51FA\uFF1A31
\u89E3\u91CA\uFF1A\u8F93\u5165\u7684\u4E8C\u8FDB\u5236\u4E32 11111111111111111111111111111101 \u4E2D\uFF0C\u5171\u6709 31 \u4F4D\u4E3A &#39;1&#39;\u3002
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>\u5FAA\u73AF\u5373\u53EF</p><p><strong>\u9898\u89E3\uFF1A</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token comment">// you need to treat n as an unsigned value</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hammingWeight</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            sum<span class="token operator">+=</span>n<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">;</span>
            n<span class="token operator">=</span>n<span class="token operator">&gt;&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,11),gn={id:"\u5251\u6307-offer-16-\u6570\u503C\u7684\u6574\u6570\u6B21\u65B9",tabindex:"-1"},hn=n("a",{class:"header-anchor",href:"#\u5251\u6307-offer-16-\u6570\u503C\u7684\u6574\u6570\u6B21\u65B9","aria-hidden":"true"},"#",-1),wn={href:"https://leetcode.cn/problems/shu-zhi-de-zheng-shu-ci-fang-lcof/",target:"_blank",rel:"noopener noreferrer"},fn=n("p",null,[n("strong",null,"\u9898\u76EE\u63CF\u8FF0\uFF1A")],-1),yn={href:"https://www.cplusplus.com/reference/valarray/pow/",target:"_blank",rel:"noopener noreferrer"},xn=n("em",null,"x",-1),_n=n("em",null,"n",-1),qn=t(`<p><strong>\u793A\u4F8B 1\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1Ax = 2.00000, n = 10
\u8F93\u51FA\uFF1A1024.00000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u793A\u4F8B 2\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1Ax = 2.10000, n = 3
\u8F93\u51FA\uFF1A9.26100
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u793A\u4F8B 3\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1Ax = 2.00000, n = -2
\u8F93\u51FA\uFF1A0.25000
\u89E3\u91CA\uFF1A2-2 = 1/22 = 1/4 = 0.25
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>\u9012\u5F52</p><p><strong>\u9898\u89E3\uFF1A</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">*</span>n<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token function">dp</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">/</span><span class="token function">dp</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">dp</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>
        <span class="token keyword">double</span> tmp<span class="token operator">=</span><span class="token function">dp</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> tmp<span class="token operator">*</span>tmp<span class="token operator">*</span>x<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">return</span> tmp<span class="token operator">*</span>tmp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,11),jn={id:"\u5251\u6307-offer-17-\u6253\u5370\u4ECE1\u5230\u6700\u5927\u7684n\u4F4D\u6570",tabindex:"-1"},Nn=n("a",{class:"header-anchor",href:"#\u5251\u6307-offer-17-\u6253\u5370\u4ECE1\u5230\u6700\u5927\u7684n\u4F4D\u6570","aria-hidden":"true"},"#",-1),Sn={href:"https://leetcode.cn/problems/da-yin-cong-1dao-zui-da-de-nwei-shu-lcof/",target:"_blank",rel:"noopener noreferrer"},zn=t(`<p><strong>\u9898\u76EE\u63CF\u8FF0\uFF1A</strong></p><p>\u8F93\u5165\u6570\u5B57 <code>n</code>\uFF0C\u6309\u987A\u5E8F\u6253\u5370\u51FA\u4ECE 1 \u5230\u6700\u5927\u7684 n \u4F4D\u5341\u8FDB\u5236\u6570\u3002\u6BD4\u5982\u8F93\u5165 3\uFF0C\u5219\u6253\u5370\u51FA 1\u30012\u30013 \u4E00\u76F4\u5230\u6700\u5927\u7684 3 \u4F4D\u6570 999\u3002</p><p><strong>\u793A\u4F8B 1:</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165: n = 1
\u8F93\u51FA: [1,2,3,4,5,6,7,8,9]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>\u786E\u5B9A\u6570\u7EC4\u5BB9\u91CF\uFF0C\u4F9D\u6B21\u5B58\u653E\u5373\u53EF</p><p><strong>\u9898\u89E3\uFF1A</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">printNumbers</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> end<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
            end<span class="token operator">*=</span><span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>end<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>end<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
            result<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,9),Tn={id:"\u5251\u6307-offer-18-\u5220\u9664\u94FE\u8868\u7684\u8282\u70B9",tabindex:"-1"},On=n("a",{class:"header-anchor",href:"#\u5251\u6307-offer-18-\u5220\u9664\u94FE\u8868\u7684\u8282\u70B9","aria-hidden":"true"},"#",-1),An={href:"https://leetcode.cn/problems/shan-chu-lian-biao-de-jie-dian-lcof/",target:"_blank",rel:"noopener noreferrer"},En=t(`<p>\u7ED9\u5B9A\u5355\u5411\u94FE\u8868\u7684\u5934\u6307\u9488\u548C\u4E00\u4E2A\u8981\u5220\u9664\u7684\u8282\u70B9\u7684\u503C\uFF0C\u5B9A\u4E49\u4E00\u4E2A\u51FD\u6570\u5220\u9664\u8BE5\u8282\u70B9\u3002</p><p>\u8FD4\u56DE\u5220\u9664\u540E\u7684\u94FE\u8868\u7684\u5934\u8282\u70B9\u3002</p><p>**\u6CE8\u610F\uFF1A**\u6B64\u9898\u5BF9\u6BD4\u539F\u9898\u6709\u6539\u52A8</p><p><strong>\u793A\u4F8B 1:</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165: head = [4,5,1,9], val = 5
\u8F93\u51FA: [4,1,9]
\u89E3\u91CA: \u7ED9\u5B9A\u4F60\u94FE\u8868\u4E2D\u503C\u4E3A 5 \u7684\u7B2C\u4E8C\u4E2A\u8282\u70B9\uFF0C\u90A3\u4E48\u5728\u8C03\u7528\u4E86\u4F60\u7684\u51FD\u6570\u4E4B\u540E\uFF0C\u8BE5\u94FE\u8868\u5E94\u53D8\u4E3A 4 -&gt; 1 -&gt; 9.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u793A\u4F8B 2:</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165: head = [4,5,1,9], val = 1
\u8F93\u51FA: [4,5,9]
\u89E3\u91CA: \u7ED9\u5B9A\u4F60\u94FE\u8868\u4E2D\u503C\u4E3A 1 \u7684\u7B2C\u4E09\u4E2A\u8282\u70B9\uFF0C\u90A3\u4E48\u5728\u8C03\u7528\u4E86\u4F60\u7684\u51FD\u6570\u4E4B\u540E\uFF0C\u8BE5\u94FE\u8868\u5E94\u53D8\u4E3A 4 -&gt; 5 -&gt; 9.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>\u524D\u540E\u6307\u9488\u904D\u5386\u5373\u53EF</p><p><strong>\u9898\u89E3\uFF1A</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Definition for singly-linked list.
 * public class ListNode <span class="token punctuation">{</span>
 *     int val;
 *     ListNode next;
 *     ListNode(int x) <span class="token punctuation">{</span> val = x; <span class="token punctuation">}</span>
 * <span class="token punctuation">}</span>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token operator">==</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token class-name">ListNode</span> p<span class="token operator">=</span>head<span class="token punctuation">;</span>
        <span class="token class-name">ListNode</span> q<span class="token operator">=</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>val<span class="token operator">==</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>
                p<span class="token punctuation">.</span>next<span class="token operator">=</span>q<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
                <span class="token keyword">return</span> head<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            p<span class="token operator">=</span>p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            q<span class="token operator">=</span>q<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> head<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,12),In={id:"\u5251\u6307-offer-19-\u6B63\u5219\u8868\u8FBE\u5F0F\u5339\u914D",tabindex:"-1"},Ln=n("a",{class:"header-anchor",href:"#\u5251\u6307-offer-19-\u6B63\u5219\u8868\u8FBE\u5F0F\u5339\u914D","aria-hidden":"true"},"#",-1),Cn={href:"https://leetcode.cn/problems/zheng-ze-biao-da-shi-pi-pei-lcof/",target:"_blank",rel:"noopener noreferrer"},Hn=t(`<p>\u8BF7\u5B9E\u73B0\u4E00\u4E2A\u51FD\u6570\u7528\u6765\u5339\u914D\u5305\u542B<code>&#39;. &#39;</code>\u548C<code>&#39;*&#39;</code>\u7684\u6B63\u5219\u8868\u8FBE\u5F0F\u3002\u6A21\u5F0F\u4E2D\u7684\u5B57\u7B26<code>&#39;.&#39;</code>\u8868\u793A\u4EFB\u610F\u4E00\u4E2A\u5B57\u7B26\uFF0C\u800C<code>&#39;*&#39;</code>\u8868\u793A\u5B83\u524D\u9762\u7684\u5B57\u7B26\u53EF\u4EE5\u51FA\u73B0\u4EFB\u610F\u6B21\uFF08\u542B0\u6B21\uFF09\u3002\u5728\u672C\u9898\u4E2D\uFF0C\u5339\u914D\u662F\u6307\u5B57\u7B26\u4E32\u7684\u6240\u6709\u5B57\u7B26\u5339\u914D\u6574\u4E2A\u6A21\u5F0F\u3002\u4F8B\u5982\uFF0C\u5B57\u7B26\u4E32<code>&quot;aaa&quot;</code>\u4E0E\u6A21\u5F0F<code>&quot;a.a&quot;</code>\u548C<code>&quot;ab*ac*a&quot;</code>\u5339\u914D\uFF0C\u4F46\u4E0E<code>&quot;aa.a&quot;</code>\u548C<code>&quot;ab*a&quot;</code>\u5747\u4E0D\u5339\u914D\u3002</p><p><strong>\u793A\u4F8B 1:</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165:
s = &quot;aa&quot;
p = &quot;a&quot;
\u8F93\u51FA: false
\u89E3\u91CA: &quot;a&quot; \u65E0\u6CD5\u5339\u914D &quot;aa&quot; \u6574\u4E2A\u5B57\u7B26\u4E32\u3002
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u793A\u4F8B 2:</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165:
s = &quot;aa&quot;
p = &quot;a*&quot;
\u8F93\u51FA: true
\u89E3\u91CA: \u56E0\u4E3A &#39;*&#39; \u4EE3\u8868\u53EF\u4EE5\u5339\u914D\u96F6\u4E2A\u6216\u591A\u4E2A\u524D\u9762\u7684\u90A3\u4E00\u4E2A\u5143\u7D20, \u5728\u8FD9\u91CC\u524D\u9762\u7684\u5143\u7D20\u5C31\u662F &#39;a&#39;\u3002\u56E0\u6B64\uFF0C\u5B57\u7B26\u4E32 &quot;aa&quot; \u53EF\u88AB\u89C6\u4E3A &#39;a&#39; \u91CD\u590D\u4E86\u4E00\u6B21\u3002
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u793A\u4F8B 3:</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165:
s = &quot;ab&quot;
p = &quot;.*&quot;
\u8F93\u51FA: true
\u89E3\u91CA: &quot;.*&quot; \u8868\u793A\u53EF\u5339\u914D\u96F6\u4E2A\u6216\u591A\u4E2A\uFF08&#39;*&#39;\uFF09\u4EFB\u610F\u5B57\u7B26\uFF08&#39;.&#39;\uFF09\u3002
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u793A\u4F8B 4:</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165:
s = &quot;aab&quot;
p = &quot;c*a*b&quot;
\u8F93\u51FA: true
\u89E3\u91CA: \u56E0\u4E3A &#39;*&#39; \u8868\u793A\u96F6\u4E2A\u6216\u591A\u4E2A\uFF0C\u8FD9\u91CC &#39;c&#39; \u4E3A 0 \u4E2A, &#39;a&#39; \u88AB\u91CD\u590D\u4E00\u6B21\u3002\u56E0\u6B64\u53EF\u4EE5\u5339\u914D\u5B57\u7B26\u4E32 &quot;aab&quot;\u3002
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u793A\u4F8B 5:</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165:
s = &quot;mississippi&quot;
p = &quot;mis*is*p*.&quot;
\u8F93\u51FA: false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>s</code> \u53EF\u80FD\u4E3A\u7A7A\uFF0C\u4E14\u53EA\u5305\u542B\u4ECE <code>a-z</code> \u7684\u5C0F\u5199\u5B57\u6BCD\u3002</li><li><code>p</code> \u53EF\u80FD\u4E3A\u7A7A\uFF0C\u4E14\u53EA\u5305\u542B\u4ECE <code>a-z</code> \u7684\u5C0F\u5199\u5B57\u6BCD\u4EE5\u53CA\u5B57\u7B26 <code>.</code> \u548C <code>*</code>\uFF0C\u65E0\u8FDE\u7EED\u7684 <code>&#39;*&#39;</code>\u3002</li></ul><hr><p>\u52A8\u6001\u89C4\u5212</p><p><strong>\u9898\u89E3\uFF1A</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isMatch</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> lens<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> lenp<span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>lens<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>lenp<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lists<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> listp<span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>lenp<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>listp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;*&#39;</span><span class="token operator">&amp;&amp;</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>lens<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>lenp<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>listp<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>listp<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">||</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">||</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">||</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>listp<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">||</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">||</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">||</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">else</span><span class="token punctuation">{</span>
                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span><span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>listp<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>listp<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>lists<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">else</span><span class="token punctuation">{</span>
                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>lens<span class="token punctuation">]</span><span class="token punctuation">[</span>lenp<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,17),Bn={id:"\u5251\u6307-offer-20-\u8868\u793A\u6570\u503C\u7684\u5B57\u7B26\u4E32",tabindex:"-1"},Fn=n("a",{class:"header-anchor",href:"#\u5251\u6307-offer-20-\u8868\u793A\u6570\u503C\u7684\u5B57\u7B26\u4E32","aria-hidden":"true"},"#",-1),Dn={href:"https://leetcode.cn/problems/biao-shi-shu-zhi-de-zi-fu-chuan-lcof/",target:"_blank",rel:"noopener noreferrer"},Rn=t(`<p>\u8BF7\u5B9E\u73B0\u4E00\u4E2A\u51FD\u6570\u7528\u6765\u5224\u65AD\u5B57\u7B26\u4E32\u662F\u5426\u8868\u793A<strong>\u6570\u503C</strong>\uFF08\u5305\u62EC\u6574\u6570\u548C\u5C0F\u6570\uFF09\u3002</p><p><strong>\u6570\u503C</strong>\uFF08\u6309\u987A\u5E8F\uFF09\u53EF\u4EE5\u5206\u6210\u4EE5\u4E0B\u51E0\u4E2A\u90E8\u5206\uFF1A</p><ol><li>\u82E5\u5E72\u7A7A\u683C</li><li>\u4E00\u4E2A <strong>\u5C0F\u6570</strong> \u6216\u8005 <strong>\u6574\u6570</strong></li><li>\uFF08\u53EF\u9009\uFF09\u4E00\u4E2A <code>&#39;e&#39;</code> \u6216 <code>&#39;E&#39;</code> \uFF0C\u540E\u9762\u8DDF\u7740\u4E00\u4E2A <strong>\u6574\u6570</strong></li><li>\u82E5\u5E72\u7A7A\u683C</li></ol><p><strong>\u5C0F\u6570</strong>\uFF08\u6309\u987A\u5E8F\uFF09\u53EF\u4EE5\u5206\u6210\u4EE5\u4E0B\u51E0\u4E2A\u90E8\u5206\uFF1A</p><ol><li>\uFF08\u53EF\u9009\uFF09\u4E00\u4E2A\u7B26\u53F7\u5B57\u7B26\uFF08<code>&#39;+&#39;</code> \u6216 <code>&#39;-&#39;</code>\uFF09</li><li>\u4E0B\u8FF0\u683C\u5F0F\u4E4B\u4E00\uFF1A <ol><li>\u81F3\u5C11\u4E00\u4F4D\u6570\u5B57\uFF0C\u540E\u9762\u8DDF\u7740\u4E00\u4E2A\u70B9 <code>&#39;.&#39;</code></li><li>\u81F3\u5C11\u4E00\u4F4D\u6570\u5B57\uFF0C\u540E\u9762\u8DDF\u7740\u4E00\u4E2A\u70B9 <code>&#39;.&#39;</code> \uFF0C\u540E\u9762\u518D\u8DDF\u7740\u81F3\u5C11\u4E00\u4F4D\u6570\u5B57</li><li>\u4E00\u4E2A\u70B9 <code>&#39;.&#39;</code> \uFF0C\u540E\u9762\u8DDF\u7740\u81F3\u5C11\u4E00\u4F4D\u6570\u5B57</li></ol></li></ol><p><strong>\u6574\u6570</strong>\uFF08\u6309\u987A\u5E8F\uFF09\u53EF\u4EE5\u5206\u6210\u4EE5\u4E0B\u51E0\u4E2A\u90E8\u5206\uFF1A</p><ol><li>\uFF08\u53EF\u9009\uFF09\u4E00\u4E2A\u7B26\u53F7\u5B57\u7B26\uFF08<code>&#39;+&#39;</code> \u6216 <code>&#39;-&#39;</code>\uFF09</li><li>\u81F3\u5C11\u4E00\u4F4D\u6570\u5B57</li></ol><p>\u90E8\u5206<strong>\u6570\u503C</strong>\u5217\u4E3E\u5982\u4E0B\uFF1A</p><ul><li><code>[&quot;+100&quot;, &quot;5e2&quot;, &quot;-123&quot;, &quot;3.1416&quot;, &quot;-1E-16&quot;, &quot;0123&quot;]</code></li></ul><p>\u90E8\u5206<strong>\u975E\u6570\u503C</strong>\u5217\u4E3E\u5982\u4E0B\uFF1A</p><ul><li><code>[&quot;12e&quot;, &quot;1a3.14&quot;, &quot;1.2.3&quot;, &quot;+-5&quot;, &quot;12e+5.4&quot;]</code></li></ul><p><strong>\u793A\u4F8B 1\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1As = &quot;0&quot;
\u8F93\u51FA\uFF1Atrue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u793A\u4F8B 2\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1As = &quot;e&quot;
\u8F93\u51FA\uFF1Afalse
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u793A\u4F8B 3\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1As = &quot;.&quot;
\u8F93\u51FA\uFF1Afalse
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u793A\u4F8B 4\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1As = &quot;    .1  &quot;
\u8F93\u51FA\uFF1Atrue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>\u5783\u573E\u9898\u76EE\uFF0C\u7EAF\u6076\u5FC3\u4EBA\uFF0C\u65E0\u8111\u5404\u79CD\u5224\u65AD\u5373\u53EF</p><p><strong>\u9898\u89E3\uFF1A</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> len<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>index<span class="token operator">&lt;</span>len<span class="token punctuation">;</span><span class="token operator">++</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;+&#39;</span><span class="token operator">||</span>list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;-&#39;</span><span class="token operator">||</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token char">&#39;9&#39;</span><span class="token operator">&amp;&amp;</span>list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">&gt;=</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token operator">||</span>list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">==</span>len<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> index2<span class="token operator">=</span>index<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>index2<span class="token operator">&lt;</span>len<span class="token punctuation">;</span><span class="token operator">++</span>index2<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>index2<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;e&#39;</span><span class="token operator">||</span>list<span class="token punctuation">[</span>index2<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;E&#39;</span><span class="token operator">||</span>list<span class="token punctuation">[</span>index2<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">boolean</span> pointflag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>index<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>index2<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;+&#39;</span><span class="token operator">||</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                 <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>index<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>pointflag<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>list<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token char">&#39;9&#39;</span><span class="token operator">&amp;&amp;</span>list<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;=</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span> pointflag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>list<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token char">&#39;9&#39;</span><span class="token operator">&amp;&amp;</span>list<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;=</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span> pointflag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>pointflag<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token char">&#39;9&#39;</span><span class="token operator">&amp;&amp;</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;=</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span>index<span class="token operator">=</span>index2<span class="token punctuation">;</span>index<span class="token operator">&lt;</span>len<span class="token punctuation">;</span><span class="token operator">++</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>index2<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>index<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;e&#39;</span><span class="token operator">||</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;E&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>index2<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;+&#39;</span><span class="token operator">||</span>list<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>len<span class="token operator">-</span><span class="token number">2</span><span class="token operator">&amp;&amp;</span>list<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&gt;=</span><span class="token char">&#39;0&#39;</span><span class="token operator">&amp;&amp;</span>list<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token char">&#39;9&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
                    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;=</span><span class="token char">&#39;0&#39;</span><span class="token operator">&amp;&amp;</span>list<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token char">&#39;9&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
                    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>list<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>list<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&gt;=</span><span class="token char">&#39;0&#39;</span><span class="token operator">&amp;&amp;</span>list<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token char">&#39;9&#39;</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token char">&#39;9&#39;</span><span class="token operator">&amp;&amp;</span>list<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;=</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;+&#39;</span><span class="token operator">||</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>index2<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">&#39;e&#39;</span><span class="token operator">&amp;&amp;</span>list<span class="token punctuation">[</span>index2<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">&#39;E&#39;</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>i<span class="token operator">!=</span>index<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>index2<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;e&#39;</span><span class="token operator">||</span>list<span class="token punctuation">[</span>index2<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;E&#39;</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>i<span class="token operator">!=</span>index2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token char">&#39;9&#39;</span><span class="token operator">&amp;&amp;</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;=</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>index<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23);function Vn(Wn,Jn){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,n("h2",r,[k,s(),n("a",d,[s("\u5251\u6307 Offer 03. \u6570\u7EC4\u4E2D\u91CD\u590D\u7684\u6570\u5B57"),p(a)])]),v,n("h2",m,[b,s(),n("a",g,[s("\u5251\u6307 Offer 04. \u4E8C\u7EF4\u6570\u7EC4\u4E2D\u7684\u67E5\u627E"),p(a)])]),h,n("h2",w,[f,s(),n("a",y,[s("\u5251\u6307 Offer 05. \u66FF\u6362\u7A7A\u683C"),p(a)])]),x,n("h2",_,[q,s(),n("a",j,[s("\u5251\u6307 Offer 06. \u4ECE\u5C3E\u5230\u5934\u6253\u5370\u94FE\u8868"),p(a)])]),N,n("h2",S,[z,s(),n("a",T,[s("\u5251\u6307 Offer 07. \u91CD\u5EFA\u4E8C\u53C9\u6811"),p(a)])]),O,n("h2",A,[E,s(),n("a",I,[s("\u5251\u6307 Offer 09. \u7528\u4E24\u4E2A\u6808\u5B9E\u73B0\u961F\u5217"),p(a)])]),L,n("h2",C,[H,s(),n("a",B,[s("\u5251\u6307 Offer 10- I. \u6590\u6CE2\u90A3\u5951\u6570\u5217"),p(a)])]),F,n("h2",D,[R,s(),n("a",V,[s("\u5251\u6307 Offer 10- II. \u9752\u86D9\u8DF3\u53F0\u9636\u95EE\u9898"),p(a)])]),W,n("h2",J,[M,s(),n("a",P,[s("\u5251\u6307 Offer 11. \u65CB\u8F6C\u6570\u7EC4\u7684\u6700\u5C0F\u6570\u5B57"),p(a)])]),Q,n("h2",G,[K,s(),n("a",U,[s("\u5251\u6307 Offer 12. \u77E9\u9635\u4E2D\u7684\u8DEF\u5F84"),p(a)])]),X,n("h2",Y,[Z,s(),n("a",$,[s("\u5251\u6307 Offer 14- I. \u526A\u7EF3\u5B50"),p(a)])]),nn,n("h2",sn,[an,s(),n("a",pn,[s("\u5251\u6307 Offer 14- II. \u526A\u7EF3\u5B50 II"),p(a)])]),tn,n("h2",en,[on,s(),n("a",cn,[s("\u5251\u6307 Offer 15. \u4E8C\u8FDB\u5236\u4E2D1\u7684\u4E2A\u6570"),p(a)])]),ln,n("p",null,[s("\u7F16\u5199\u4E00\u4E2A\u51FD\u6570\uFF0C\u8F93\u5165\u662F\u4E00\u4E2A\u65E0\u7B26\u53F7\u6574\u6570\uFF08\u4EE5\u4E8C\u8FDB\u5236\u4E32\u7684\u5F62\u5F0F\uFF09\uFF0C\u8FD4\u56DE\u5176\u4E8C\u8FDB\u5236\u8868\u8FBE\u5F0F\u4E2D\u6570\u5B57\u4F4D\u6570\u4E3A '1' \u7684\u4E2A\u6570\uFF08\u4E5F\u88AB\u79F0\u4E3A "),n("a",un,[s("\u6C49\u660E\u91CD\u91CF"),p(a)]),s(").\uFF09\u3002")]),rn,n("ul",null,[kn,n("li",null,[s("\u5728 Java \u4E2D\uFF0C\u7F16\u8BD1\u5668\u4F7F\u7528 "),n("a",dn,[s("\u4E8C\u8FDB\u5236\u8865\u7801"),p(a)]),s(" \u8BB0\u6CD5\u6765\u8868\u793A\u6709\u7B26\u53F7\u6574\u6570\u3002\u56E0\u6B64\uFF0C\u5728\u4E0A\u9762\u7684 "),vn,s(" \u4E2D\uFF0C\u8F93\u5165\u8868\u793A\u6709\u7B26\u53F7\u6574\u6570 "),mn,s("\u3002")])]),bn,n("h2",gn,[hn,s(),n("a",wn,[s("\u5251\u6307 Offer 16. \u6570\u503C\u7684\u6574\u6570\u6B21\u65B9"),p(a)])]),fn,n("p",null,[s("\u5B9E\u73B0 "),n("a",yn,[s("pow("),xn,s(", "),_n,s(")"),p(a)]),s(" \uFF0C\u5373\u8BA1\u7B97 x \u7684 n \u6B21\u5E42\u51FD\u6570\uFF08\u5373\uFF0Cxn\uFF09\u3002\u4E0D\u5F97\u4F7F\u7528\u5E93\u51FD\u6570\uFF0C\u540C\u65F6\u4E0D\u9700\u8981\u8003\u8651\u5927\u6570\u95EE\u9898\u3002")]),qn,n("h2",jn,[Nn,s(),n("a",Sn,[s("\u5251\u6307 Offer 17. \u6253\u5370\u4ECE1\u5230\u6700\u5927\u7684n\u4F4D\u6570"),p(a)])]),zn,n("h2",Tn,[On,s(),n("a",An,[s("\u5251\u6307 Offer 18. \u5220\u9664\u94FE\u8868\u7684\u8282\u70B9"),p(a)])]),En,n("h2",In,[Ln,s(),n("a",Cn,[s("\u5251\u6307 Offer 19. \u6B63\u5219\u8868\u8FBE\u5F0F\u5339\u914D"),p(a)])]),Hn,n("h2",Bn,[Fn,s(),n("a",Dn,[s("\u5251\u6307 Offer 20. \u8868\u793A\u6570\u503C\u7684\u5B57\u7B26\u4E32"),p(a)])]),Rn])}var Qn=e(i,[["render",Vn],["__file","offer-1.html.vue"]]);export{Qn as default};
